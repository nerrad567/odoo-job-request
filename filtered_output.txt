=== ./security/ir_rule.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="rule_ir_attachment_job_request" model="ir.rule">
        <field name="name">Attachment Access for Staff</field>
        <field name="model_id" ref="base.model_ir_attachment"/>
        <field name="domain_force">[('res_model', '=', 'electrical.job.request')]</field>
        <field name="groups" eval="[(4, ref('base.group_user'))]"/>
        <field name="perm_read" eval="True"/>
        <field name="perm_write" eval="False"/>
        <field name="perm_create" eval="True"/>
        <field name="perm_unlink" eval="False"/>
    </record>
</odoo>
=== ./security/ir.model.access.csv ===
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_electrical_job_request,Electrical Job Request,model_electrical_job_request,base.group_user,1,1,1,1
access_electrical_socket_line,Electrical Socket Line,model_electrical_socket_line,base.group_user,1,1,1,1
access_ir_attachment_job_request,Attachment for Job Request,model_ir_attachment,base.group_public,0,0,1,0
=== ./static/src/js/job_request_form.js ===
odoo.define('electrical_job.job_request_form', ['@odoo/owl', '@web/core/network/rpc'], function (require) {
    'use strict';

    const { Component, useState, onMounted, xml } = require('@odoo/owl');
    const { rpc } = require('@web/core/network/rpc');

    class JobRequestForm extends Component {
        static template = xml`
            <div class="job-request-form">
                <h1>Electrical Job Request</h1>
                <form t-on-submit.prevent="submitForm">
                    <div t-if="state.current_step === 1">
                        <h3>Step 1: Basic Information</h3>
                        <div class="form-group">
                            <label for="name">Your Name <span style="color: red;">(REQUIRED)</span></label>
                            <input type="text" id="name" t-model="state.name" class="form-control" required="required"/>
                        </div>
                        <div class="form-group">
                            <label for="email">Email <span style="color: red;">(REQUIRED)</span></label>
                            <input type="email" id="email" t-model="state.email" class="form-control" required="required"/>
                        </div>
                        <div class="form-group">
                            <label for="phone">Phone</label>
                            <input type="text" id="phone" t-model="state.phone" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label for="job_type">Job Type <span style="color: red;">(REQUIRED)</span></label>
                            <select id="job_type" t-model="state.job_type" t-on-change="updateJobType" class="form-control" required="required">
                                <option value="">Select a job type</option>
                                <option value="new_socket">New Socket</option>
                            </select>
                        </div>
                    </div>
                    <div t-if="state.job_type === 'new_socket' &amp;&amp; state.current_step === 2">
                        <h3>Step 2: General Property Details</h3>
                        <p>These help us assess safety and pricing accurately. Photos are optional but useful.</p>
                        <div class="form-group">
                            <label>Property Type <span style="color: red;">(REQUIRED)</span></label>
                            <select t-model="state.property_type" class="form-control" required="required">
                                <option value="">Select...</option>
                                <option value="house">House</option>
                                <option value="flat">Flat/Apartment</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Approximate Property Age <span style="color: red;">(REQUIRED)</span></label>
                            <select t-model="state.property_age" class="form-control" required="required">
                                <option value="">Select...</option>
                                <option value="pre1950">Before 1950</option>
                                <option value="1950-1980">1950-1980</option>
                                <option value="post1980">After 1980</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Foundation Type (affects wiring routes)</label>
                            <select t-model="state.foundation_type" class="form-control">
                                <option value="">Select...</option>
                                <option value="slab">Slab (no crawlspace)</option>
                                <option value="crawl">Crawlspace</option>
                                <option value="other">Other/Not Sure</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Attic Access Available? (for overhead routing)</label>
                            <select t-model="state.attic_access" class="form-control">
                                <option value="">Select...</option>
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Photo of Fuse Board / Electrical Panel <span style="color: red;">(REQUIRED)</span></label>
                            <input type="file" id="fuse_board" t-on-change="onFuseBoardChange" accept="image/*" class="form-control" required="required"/>
                            <div t-if="state.fuse_board_attachment" class="mt-2">
                                <img t-att-src="state.fuse_board_attachment.thumbnail" style="max-width: 100px;"/>
                                <span t-esc="state.fuse_board_attachment.name"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Panel Type</label>
                            <select t-model="state.panel_type" class="form-control">
                                <option value="">Select...</option>
                                <option value="breakers">Modern (Circuit Breakers)</option>
                                <option value="fuses">Older (Fuses)</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Any Recent Electrical Upgrades? (e.g., new panel in last 10 years)</label>
                            <input type="text" t-model="state.recent_upgrades" class="form-control" placeholder="e.g., New panel in 2020"/>
                        </div>
                    </div>
                    <div t-if="state.job_type === 'new_socket' &amp;&amp; state.current_step === 3">
                        <h3>Step 3: Bonding &amp; Grounding</h3>
                        <div class="form-group">
                            <label>Water Bond Present?</label>
                            <select t-model="state.water_bond" class="form-control">
                                <option value="">Select...</option>
                                <option value="no">No</option>
                                <option value="yes">Yes</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                            <div t-if="state.water_bond === 'yes'">
                                <label>Location Description</label>
                                <input type="text" t-model="state.water_bond_location" class="form-control"/>
                                <label>Photo</label>
                                <input type="file" t-on-change="onWaterBondPhotoChange" accept="image/*" class="form-control"/>
                                <div t-if="state.water_bond_attachment" class="mt-2">
                                    <img t-att-src="state.water_bond_attachment.thumbnail" style="max-width: 100px;"/>
                                    <span t-esc="state.water_bond_attachment.name"/>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Gas Bond Present?</label>
                            <select t-model="state.gas_bond" class="form-control">
                                <option value="">Select...</option>
                                <option value="no">No</option>
                                <option value="yes">Yes</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                            <div t-if="state.gas_bond === 'yes'">
                                <label>Location Description</label>
                                <input type="text" t-model="state.gas_bond_location" class="form-control"/>
                                <label>Photo</label>
                                <input type="file" t-on-change="onGasBondPhotoChange" accept="image/*" class="form-control"/>
                                <div t-if="state.gas_bond_attachment" class="mt-2">
                                    <img t-att-src="state.gas_bond_attachment.thumbnail" style="max-width: 100px;"/>
                                    <span t-esc="state.gas_bond_attachment.name"/>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Oil Bond Present?</label>
                            <select t-model="state.oil_bond" class="form-control">
                                <option value="">Select...</option>
                                <option value="no">No</option>
                                <option value="yes">Yes</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                            <div t-if="state.oil_bond === 'yes'">
                                <label>Location Description</label>
                                <input type="text" t-model="state.oil_bond_location" class="form-control"/>
                                <label>Photo</label>
                                <input type="file" t-on-change="onOilBondPhotoChange" accept="image/*" class="form-control"/>
                                <div t-if="state.oil_bond_attachment" class="mt-2">
                                    <img t-att-src="state.oil_bond_attachment.thumbnail" style="max-width: 100px;"/>
                                    <span t-esc="state.oil_bond_attachment.name"/>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Other Buried Services or Steel Work Entering Property? (e.g., underground cables)</label>
                            <select t-model="state.other_services" class="form-control">
                                <option value="">Select...</option>
                                <option value="no">No</option>
                                <option value="yes">Yes</option>
                                <option value="unknown">Not Sure</option>
                            </select>
                            <div t-if="state.other_services === 'yes'">
                                <label>Description</label>
                                <textarea t-model="state.other_services_desc" class="form-control"/>
                                <label>Photo</label>
                                <input type="file" t-on-change="onOtherServicesPhotoChange" accept="image/*" class="form-control"/>
                                <div t-if="state.other_services_attachment" class="mt-2">
                                    <img t-att-src="state.other_services_attachment.thumbnail" style="max-width: 100px;"/>
                                    <span t-esc="state.other_services_attachment.name"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div t-if="state.job_type === 'new_socket' &amp;&amp; state.current_step === 4">
                        <h3>Step 4: Socket Details [Total - <t t-esc="state.socket_lines.length"/>]</h3>
                        <div t-foreach="state.socket_lines" t-as="line" t-key="line_index" class="socket-line mb-3">
                            <div class="form-group">
                                <label>Room Name <span style="color: red;">(REQUIRED)</span></label>
                                <input type="text" t-model="line.room_name" class="form-control" required="required"/>
                            </div>
                            <div class="form-group">
                                <label>Socket Style <span style="color: red;">(REQUIRED)</span></label>
                                <select t-model="line.socket_style" class="form-control" required="required">
                                    <option value="">Select a style</option>
                                    <t t-foreach="socketStyles" t-as="style" t-key="style_index">
                                        <option t-att-value="style.value" t-esc="style.label"/>
                                    </t>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Height from Floor (in meters, e.g., 1.2) <span style="color: red;">(REQUIRED)</span></label>
                                <input type="number" t-model="line.height_from_floor" class="form-control" min="0" step="any" required="required"/>
                            </div>
                            <div class="form-group">
                                <label>Surface or Flush Mounted? <span style="color: red;">(REQUIRED)</span></label>
                                <select t-model="line.mount_type" class="form-control" required="required">
                                    <option value="">Select...</option>
                                    <option value="surface">Surface (on wall)</option>
                                    <option value="flush">Flush (in wall)</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Flooring Type <span style="color: red;">(REQUIRED)</span></label>
                                <select t-model="line.flooring_type" class="form-control" required="required">
                                    <option value="">Select...</option>
                                    <option value="carpet">Carpet</option>
                                    <option value="laminate">Laminate</option>
                                    <option value="tile">Tile</option>
                                    <option value="wood">Wood</option>
                                    <option value="other">Other</option>
                                </select>
                                <div t-if="line.flooring_type === 'other'">
                                    <input type="text" t-model="line.flooring_other" class="form-control" placeholder="Describe..."/>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Wall Type (affects installation)</label>
                                <select t-model="line.wall_type" class="form-control">
                                    <option value="">Select...</option>
                                    <option value="plasterboard">Plasterboard/Drywall</option>
                                    <option value="brick">Brick/Concrete</option>
                                    <option value="tiled">Tiled Wall</option>
                                    <option value="glass_splashback">Glass Splashback</option>
                                    <option value="metal_splashback">Metal Splashback</option>
                                    <option value="cladding">Cladding</option>
                                    <option value="other">Other/Not Sure</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Number of Gangs</label>
                                <select t-model="line.gangs" class="form-control">
                                    <option value="">Select...</option>
                                    <option value="single">Single</option>
                                    <option value="double">Double</option>
                                    <option value="triple">Triple</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Photo of Desired Socket Location</label>
                                <input type="file" t-on-change="(ev) => this.onLocationChange(line_index, ev)" accept="image/*" class="form-control"/>
                                <div t-if="line.location_attachments.length" class="mt-2">
                                    <t t-foreach="line.location_attachments" t-as="file" t-key="file_index">
                                        <img t-att-src="file.thumbnail" style="max-width: 100px;"/>
                                        <span t-esc="file.name"/>
                                    </t>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Photo/Video of Possible Route &amp; Supply (e.g., from nearest socket/fuseboard)</label>
                                <input type="file" multiple="multiple" t-on-change="(ev) => this.onRouteChange(line_index, ev)" accept="image/*,video/*" class="form-control"/>
                                <p>Tip: Short video tracing the route helps us quote accurately.</p>
                                <div t-if="line.route_attachments.length" class="mt-2">
                                    <t t-foreach="line.route_attachments" t-as="file" t-key="file_index">
                                        <t t-if="file.thumbnail">
                                            <img t-att-src="file.thumbnail" style="max-width: 100px;"/>
                                        </t>
                                        <span t-esc="file.name"/>
                                    </t>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Additional Comments for this Socket</label>
                                <textarea t-model="line.socket_comments" class="form-control" rows="3" placeholder="Any other details about this socket installation..."/>
                            </div>
                            <button type="button" t-on-click="() => this.removeSocketLine(line_index)" class="btn btn-danger" t-if="state.socket_lines.length > 1">Remove</button>
                        </div>
                        <button type="button" t-on-click="addSocketLine" class="btn btn-secondary">Add Another Socket</button>
                    </div>
                    <div t-if="state.current_step === state.total_steps &amp;&amp; state.job_type">
                        <h3>Step <t t-esc="state.total_steps"/>: Additional Notes &amp; Attachments</h3>
                        <div class="form-group">
                            <label for="customer_notes">Additional Notes</label>
                            <textarea id="customer_notes" t-model="state.customer_notes" class="form-control" rows="4"/>
                        </div>
                        <div class="form-group">
                            <label for="attachments">Other Relevant Data (Photos, PDFs, Excel, Videos)</label>
                            <input type="file" id="attachments" multiple="multiple" accept="image/*,application/pdf,.xlsx,.xls,video/*" t-on-change="onFileChange" class="form-control"/>
                            <div t-if="state.attachments.length" class="mt-2">
                                <h4>Selected Files [<t t-esc="state.attachments.length"/>]</h4>
                                <ul class="list-unstyled">
                                    <t t-foreach="state.attachments" t-as="file" t-key="file_index">
                                        <li class="d-flex align-items-center mb-2">
                                            <t t-if="file.thumbnail">
                                                <img t-att-src="file.thumbnail" alt="Thumbnail" style="max-width: 100px; max-height: 100px; margin-right: 10px;"/>
                                            </t>
                                            <span>
                                                <t t-esc="file.name"/> (<t t-esc="(file.size / 1024 / 1024).toFixed(2)"/> MB)
                                                <t t-if="file.status === 'uploading'"> Uploading... <t t-esc="file.progress"/>%</t>
                                                <t t-if="file.status === 'error'"> Error: <t t-esc="file.errorMsg"/></t>
                                                <button type="button" t-on-click="() => this.removeFile(file_index)" class="btn btn-sm btn-danger ml-2">Remove</button>
                                            </span>
                                        </li>
                                    </t>
                                </ul>
                                <p>Total Size: <t t-esc="(state.attachments.reduce((sum, file) => sum + file.size, 0) / 1024 / 1024).toFixed(2)"/> MB</p>
                            </div>
                        </div>
                    </div>
                    <div t-if="state.message" t-att-class="state.messageType" class="alert mt-3">
                        <t t-esc="state.message"/>
                    </div>
                    <div class="form-group mt-3">
                        <button type="button" t-on-click="prevStep" class="btn btn-secondary" t-if="state.current_step > 1">Back</button>
                        <button type="button" t-on-click="nextStep" class="btn btn-primary ml-2" t-if="state.current_step &lt; state.total_steps">Next</button>
                        <button type="submit" class="btn btn-primary ml-2" t-if="state.current_step === state.total_steps &amp;&amp; state.job_type" t-att-disabled="state.isSubmitting">Submit Request</button>
                        <t t-if="state.isSubmitting">
                            <span class="ml-2">Processing...</span>
                        </t>
                        <t t-if="state.job_type === 'new_socket'">
                            <span class="ml-2">[Total Sockets - <t t-esc="state.socket_lines.length"/>]</span>
                        </t>
                    </div>
                </form>
            </div>
        `;

        setup() {
            this.state = useState({
                current_step: 1,
                total_steps: 1, // Updated dynamically
                name: '',
                email: '',
                phone: '',
                job_type: '',
                customer_notes: '',
                socket_lines: [],
                attachments: [],
                isSubmitting: false,
                message: '',
                messageType: '',
                property_type: '',
                property_age: '',
                foundation_type: '',
                attic_access: '',
                panel_type: '',
                recent_upgrades: '',
                fuse_board_attachment: null,
                water_bond: '',
                water_bond_location: '',
                water_bond_attachment: null,
                gas_bond: '',
                gas_bond_location: '',
                gas_bond_attachment: null,
                oil_bond: '',
                oil_bond_location: '',
                oil_bond_attachment: null,
                other_services: '',
                other_services_desc: '',
                other_services_attachment: null,
            });

            onMounted(() => {
                console.log('JobRequestForm mounted');
            });
        }

        updateJobType(ev) {
            this.state.job_type = ev.target.value;
            this.updateTotalSteps();
        }

        updateTotalSteps() {
            if (this.state.job_type === 'new_socket') {
                this.state.total_steps = 5; // Basic, General, Bonding, Sockets, Notes/Attach
            } else if (this.state.job_type) {
                this.state.total_steps = 2; // Basic, Notes/Attach for other types
            } else {
                this.state.total_steps = 1; // Only Basic if no job_type
            }
        }

        validateCurrentStep() {
            if (this.state.current_step === 1) {
                if (!this.state.name.trim() || !this.state.email.includes('@') || !this.state.job_type) {
                    this.state.message = 'Please fill required fields in Basic Information with a valid email.';
                    this.state.messageType = 'alert-danger';
                    return false;
                }
            } else if (this.state.current_step === 2 && this.state.job_type === 'new_socket') {
                if (!this.state.property_type || !this.state.property_age || !this.state.fuse_board_attachment) {
                    this.state.message = 'Please fill required fields in General Property Details.';
                    this.state.messageType = 'alert-danger';
                    return false;
                }
            } else if (this.state.current_step === 4 && this.state.job_type === 'new_socket') {
                if (this.state.socket_lines.length === 0) {
                    this.state.message = 'Please add at least one socket.';
                    this.state.messageType = 'alert-danger';
                    return false;
                }
                for (let line of this.state.socket_lines) {
                    if (!line.room_name.trim() || !line.socket_style || line.height_from_floor <= 0 || !line.mount_type || !line.flooring_type) {
                        this.state.message = 'Please fill required fields for all sockets.';
                        this.state.messageType = 'alert-danger';
                        return false;
                    }
                }
            }
            // Add more step validations as needed
            return true;
        }

        nextStep() {
            if (this.validateCurrentStep()) {
                if (this.state.current_step < this.state.total_steps) {
                    if (this.state.current_step === 3 && this.state.job_type === 'new_socket' && this.state.socket_lines.length === 0) {
                        this.addSocketLine(); // Add initial socket when entering step 4
                    }
                    this.state.current_step++;
                    this.state.message = ''; // Clear error
                }
            }
        }

        prevStep() {
            if (this.state.current_step > 1) {
                this.state.current_step--;
                this.state.message = ''; // Clear error
            }
        }

        addSocketLine() {
            this.state.socket_lines.push({ room_name: '', socket_style: '', height_from_floor: 0, mount_type: '', flooring_type: '', flooring_other: '', wall_type: '', gangs: '', location_attachments: [], route_attachments: [], socket_comments: '' });
        }

        removeSocketLine(index) {
            if (this.state.socket_lines.length > 1) {
                this.state.socket_lines.splice(index, 1);
            }
        }

        async onFileChange(ev) {
            const files = Array.from(ev.target.files);
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'video/mp4', 'video/mpeg', 'video/webm'];
            const maxFileSize = 1 * 1024 * 1024 * 1024; // 1GB
            const maxTotalSize = 10 * 1024 * 1024 * 1024; // 10GB

            let totalSize = this.state.attachments.reduce((sum, f) => sum + f.size, 0);
            const validFiles = await Promise.all(files.map(async file => {
                if (!allowedTypes.includes(file.type)) return null;
                if (file.size > maxFileSize) return null;
                totalSize += file.size;
                if (totalSize > maxTotalSize) return null;
                let thumbnail = null;
                if (file.type.startsWith('image/')) {
                    thumbnail = await this.getThumbnail(file);
                }
                return { name: file.name, type: file.type, size: file.size, file, thumbnail, status: 'pending', progress: 0 };
            }));

            this.state.attachments.push(...validFiles.filter(f => f));
        }

        removeFile(index) {
            this.state.attachments.splice(index, 1);
        }

        getThumbnail(file) {
            return new Promise(resolve => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.readAsDataURL(file);
            });
        }

        async onFuseBoardChange(ev) {
            await this.handleSingleFileChange(ev, 'fuse_board_attachment');
        }

        async onWaterBondPhotoChange(ev) {
            await this.handleSingleFileChange(ev, 'water_bond_attachment');
        }

        async onGasBondPhotoChange(ev) {
            await this.handleSingleFileChange(ev, 'gas_bond_attachment');
        }

        async onOilBondPhotoChange(ev) {
            await this.handleSingleFileChange(ev, 'oil_bond_attachment');
        }

        async onOtherServicesPhotoChange(ev) {
            await this.handleSingleFileChange(ev, 'other_services_attachment');
        }

        async handleSingleFileChange(ev, key) {
            const file = ev.target.files[0];
            if (!file) return;
            // Similar validation as onFileChange
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!allowedTypes.includes(file.type)) {
                this.state.message = `Invalid file type for ${key}.`;
                this.state.messageType = 'alert-danger';
                return;
            }
            // Size checks...
            let thumbnail = await this.getThumbnail(file);
            this.state[key] = { name: file.name, type: file.type, size: file.size, file, thumbnail, status: 'pending', progress: 0 };
        }

        async onLocationChange(index, ev) {
            await this.handleMultiFileChange(ev, index, 'location_attachments', ['image/jpeg', 'image/png', 'image/gif']);
        }

        async onRouteChange(index, ev) {
            await this.handleMultiFileChange(ev, index, 'route_attachments', ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/mpeg', 'video/webm']);
        }

        async handleMultiFileChange(ev, index, key, allowedTypes) {
            const files = Array.from(ev.target.files);
            // Validation similar to onFileChange
            const validFiles = await Promise.all(files.filter(file => allowedTypes.includes(file.type)).map(async file => {
                let thumbnail = null;
                if (file.type.startsWith('image/')) {
                    thumbnail = await this.getThumbnail(file);
                }
                return { name: file.name, type: file.type, size: file.size, file, thumbnail, status: 'pending', progress: 0 };
            }));
            this.state.socket_lines[index][key].push(...validFiles);
        }

        async uploadFile(fileObj) {
            // Existing upload logic to get presigned URL and PUT to S3
            const presigned = await rpc('/job-request/presigned-url', {
                file_name: fileObj.name,
                file_type: fileObj.type
            });
            if (presigned.status !== 'success') throw new Error(presigned.message);

            const response = await fetch(presigned.data.url, {
                method: 'PUT',
                body: fileObj.file,
                headers: { 'Content-Type': fileObj.type }
            });

            if (!response.ok) throw new Error('Upload failed');

            return { name: fileObj.name, type: fileObj.type, s3_key: presigned.data.s3_key };
        }

        async submitForm(ev) {
            ev.preventDefault();
            this.state.message = '';
            this.state.messageType = '';

            // Basic validation
            if (this.state.job_type === 'new_socket' && !this.state.socket_lines.length) {
                this.state.message = 'At least one socket required.';
                this.state.messageType = 'alert-danger';
                return;
            }
            if (this.state.job_type === 'new_socket' && !this.state.fuse_board_attachment) {
                this.state.message = 'Fuse board photo required.';
                this.state.messageType = 'alert-danger';
                return;
            }

            this.state.isSubmitting = true;

            try {
                // Upload header single attachments
                const headerMetadata = {};
                for (const key of ['fuse_board_attachment', 'water_bond_attachment', 'gas_bond_attachment', 'oil_bond_attachment', 'other_services_attachment']) {
                    const fileObj = this.state[key];
                    if (fileObj && fileObj.status === 'pending') {
                        headerMetadata[key] = await this.uploadFile(fileObj);
                        fileObj.status = 'uploaded';
                    } else if (fileObj) {
                        headerMetadata[key] = { name: fileObj.name, type: fileObj.type, s3_key: fileObj.s3_key };
                    }
                }

                // Upload per-socket
                const socketMetadata = await Promise.all(this.state.socket_lines.map(async line => ({
                    location_attachments: await Promise.all(line.location_attachments.map(async f => {
                        if (f.status === 'pending') f = await this.uploadFile(f);
                        return { name: f.name, type: f.type, s3_key: f.s3_key };
                    })),
                    route_attachments: await Promise.all(line.route_attachments.map(async f => {
                        if (f.status === 'pending') f = await this.uploadFile(f);
                        return { name: f.name, type: f.type, s3_key: f.s3_key };
                    })),
                })));

                // Upload general attachments
                const generalMetadata = await Promise.all(this.state.attachments.map(async f => {
                    if (f.status === 'pending') f = await this.uploadFile(f);
                    return { name: f.name, type: f.type, s3_key: f.s3_key };
                }));

                const formData = {
                    name: this.state.name,
                    email: this.state.email,
                    phone: this.state.phone,
                    job_type: this.state.job_type,
                    customer_notes: this.state.customer_notes,
                    property_type: this.state.property_type,
                    property_age: this.state.property_age,
                    foundation_type: this.state.foundation_type,
                    attic_access: this.state.attic_access,
                    panel_type: this.state.panel_type,
                    recent_upgrades: this.state.recent_upgrades,
                    fuse_board_attachment: headerMetadata.fuse_board_attachment,
                    water_bond: this.state.water_bond,
                    water_bond_location: this.state.water_bond_location,
                    water_bond_attachment: headerMetadata.water_bond_attachment,
                    gas_bond: this.state.gas_bond,
                    gas_bond_location: this.state.gas_bond_location,
                    gas_bond_attachment: headerMetadata.gas_bond_attachment,
                    oil_bond: this.state.oil_bond,
                    oil_bond_location: this.state.oil_bond_location,
                    oil_bond_attachment: headerMetadata.oil_bond_attachment,
                    other_services: this.state.other_services,
                    other_services_desc: this.state.other_services_desc,
                    other_services_attachment: headerMetadata.other_services_attachment,
                    socket_lines: this.state.socket_lines.map((line, i) => ({
                        room_name: line.room_name,
                        socket_style: line.socket_style,
                        height_from_floor: line.height_from_floor,
                        mount_type: line.mount_type,
                        flooring_type: line.flooring_type,
                        flooring_other: line.flooring_other,
                        wall_type: line.wall_type,
                        gangs: line.gangs,
                        location_attachments: socketMetadata[i].location_attachments,
                        route_attachments: socketMetadata[i].route_attachments,
                        socket_comments: line.socket_comments,
                    })),
                    attachments: generalMetadata,
                };

                const response = await rpc('/job-request/submit', formData);
                if (response.status === 'success') {
                    this.state.message = 'Submitted successfully.';
                    this.state.messageType = 'alert-success';
                    setTimeout(() => window.location.href = '/job-request/thank-you', 2000);
                } else {
                    throw new Error(response.message);
                }
            } catch (error) {
                this.state.message = 'Error: ' + error.message;
                this.state.messageType = 'alert-danger';
            } finally {
                this.state.isSubmitting = false;
            }
        }

        get socketStyles() {
            return [
                { value: 'standard', label: 'Standard' },
                { value: 'usb', label: 'USB Integrated' },
                { value: 'smart', label: 'Smart Socket' }
            ];
        }
    }

    const root = document.querySelector('#job_request_form');
    if (root) {
        const { mount } = owl;
        mount(JobRequestForm, root);
    } else {
        console.log('No #job_request_form element found, skipping mount');
    }
});
=== ./views/electrical_job_request.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Form View for Electrical Job Request -->
    <record id="view_electrical_job_request_form" model="ir.ui.view">
        <field name="name">electrical.job.request.form</field>
        <field name="model">electrical.job.request</field>
        <field name="arch" type="xml">
            <form string="Electrical Job Request">
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="email"/>
                        <field name="phone"/>
                        <field name="job_type"/>
                        <field name="customer_notes"/>
                        <field name="crm_lead_id" domain="[('type', '=', 'lead')]"/>
                    </group>
                    <notebook>
                        <page string="General Details" invisible="job_type != 'new_socket'">
                            <group>
                                <field name="property_type"/>
                                <field name="property_age"/>
                                <field name="foundation_type"/>
                                <field name="attic_access"/>
                                <field name="panel_type"/>
                                <field name="recent_upgrades"/>
                                <field name="fuse_board_attachment_id" widget="image"/>
                            </group>
                            <group string="Bonding">
                                <field name="water_bond"/>
                                <field name="water_bond_location" invisible="water_bond != 'yes'"/>
                                <field name="water_bond_attachment_id" widget="image" invisible="water_bond != 'yes'"/>
                                <field name="gas_bond"/>
                                <field name="gas_bond_location" invisible="gas_bond != 'yes'"/>
                                <field name="gas_bond_attachment_id" widget="image" invisible="gas_bond != 'yes'"/>
                                <field name="oil_bond"/>
                                <field name="oil_bond_location" invisible="oil_bond != 'yes'"/>
                                <field name="oil_bond_attachment_id" widget="image" invisible="oil_bond != 'yes'"/>
                                <field name="other_services"/>
                                <field name="other_services_desc" invisible="other_services != 'yes'"/>
                                <field name="other_services_attachment_id" widget="image" invisible="other_services != 'yes'"/>
                            </group>
                        </page>
                        <page string="Socket Details" invisible="job_type != 'new_socket'">
                            <field name="socket_lines" nolabel="1" context="{'list_view_ref': 'electrical_job_request.view_electrical_socket_line_list', 'form_view_ref': 'electrical_job_request.view_electrical_socket_line_form'}"/>
                        </page>
                        <page string="Attachments">
                            <field name="attachments" widget="many2many_binary_multi_files" nolabel="1"/>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>

    <!-- List View for Electrical Socket Line (separate record) -->
    <record id="view_electrical_socket_line_list" model="ir.ui.view">
        <field name="name">electrical.socket.line.list</field>
        <field name="model">electrical.socket.line</field>
        <field name="arch" type="xml">
            <list editable="bottom">
                <field name="room_name"/>
                <field name="socket_style"/>
                <field name="height_from_floor"/>
                <field name="mount_type"/>
                <field name="flooring_type"/>
                <field name="flooring_other" invisible="flooring_type != 'other'"/>
                <field name="wall_type"/>
                <field name="gangs"/>
                <field name="socket_comments"/>
            </list>
        </field>
    </record>

    <!-- Form View for Electrical Socket Line (separate record) -->
    <record id="view_electrical_socket_line_form" model="ir.ui.view">
        <field name="name">electrical.socket.line.form</field>
        <field name="model">electrical.socket.line</field>
        <field name="arch" type="xml">
            <form>
                <group>
                    <field name="room_name"/>
                    <field name="socket_style"/>
                    <field name="height_from_floor"/>
                    <field name="mount_type"/>
                    <field name="flooring_type"/>
                    <field name="flooring_other" invisible="flooring_type != 'other'"/>
                    <field name="wall_type"/>
                    <field name="gangs"/>
                    <field name="socket_comments"/>
                </group>
                <notebook>
                    <page string="Location Attachments">
                        <field name="location_attachments" widget="many2many_binary_multi_files"/>
                    </page>
                    <page string="Route Attachments">
                        <field name="route_attachments" widget="many2many_binary_multi_files"/>
                    </page>
                </notebook>
            </form>
        </field>
    </record>

    <!-- List View for Electrical Job Request -->
    <record id="view_electrical_job_request_tree" model="ir.ui.view">
        <field name="name">electrical.job.request.list</field>
        <field name="model">electrical.job.request</field>
        <field name="arch" type="xml">
            <list string="Electrical Job Requests">
                <field name="name"/>
                <field name="email"/>
                <field name="phone"/>
                <field name="job_type"/>
                <field name="crm_lead_id"/>
            </list>
        </field>
    </record>

    <!-- Action for Electrical Job Request -->
    <record id="action_electrical_job_request" model="ir.actions.act_window">
        <field name="name">Electrical Job Requests</field>
        <field name="res_model">electrical.job.request</field>
        <field name="view_mode">list,form</field>
        <field name="view_id" ref="view_electrical_job_request_tree"/>
    </record>

    <!-- Menu Item -->
    <menuitem id="menu_electrical_job_request"
              name="Job Requests"
              parent="crm.crm_menu_root"
              action="action_electrical_job_request"
              sequence="10"/>

    <!-- Public Form Template -->
    <template id="job_request_form" name="Electrical Job Request Form">
        <t t-call="website.layout">
            <div class="container mt-4">
                <div id="job_request_form"/>
            </div>
        </t>
    </template>

    <!-- Thank-You Page Template -->
    <template id="job_request_thank_you" name="Job Request Thank You">
        <t t-call="website.layout">
            <div class="container mt-4">
                <h1>Thank You!</h1>
                <p>Your electrical job request has been submitted successfully.</p>
                <a href="/job-request" class="btn btn-primary">Submit Another Request</a>
            </div>
        </t>
    </template>
</odoo>
=== ./__manifest__.py ===
{
    "name": "Electrical Job Request Portal",
    "version": "1.1.0",  # Bumped for refactor
    "summary": "Public job request portal for electrical services",
    "category": "Website/CRM",
    "author": "Gray Logic",
    "license": "LGPL-3",
    "depends": ["website", "crm", "portal", "web"],  # No changes needed
    "external_dependencies": {
        "python": ["boto3"]  # Isolated; ensure installed via pip
    },
    "data": [
        "security/ir.model.access.csv",
        "security/ir_rule.xml",
        "views/electrical_job_request.xml",
        "data/system_parameters.xml",
    ],
    "assets": {
        "web.assets_frontend": [
            "electrical_job_request/static/src/js/job_request_form.js",
        ],
    },
    "installable": True,
    "application": False,
    "auto_install": False,  # Explicit; prevents auto-install on dependency match
}
=== ./filtered_output.txt ===

=== ./models/job_request_model.py ===
# models/job_request_model.py
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class ElectricalJobRequest(models.Model):
    _name = 'electrical.job.request'
    _description = 'Electrical Job Request'
    _order = 'create_date desc'

    name = fields.Char(string='Customer Name', required=True)
    email = fields.Char(string='Email', required=True)
    phone = fields.Char(string='Phone')
    job_type = fields.Selection([
        ('new_socket', 'New Socket'),
    ], string='Job Type', required=True, default='new_socket')
    customer_notes = fields.Text(string='Customer Notes')
    socket_lines = fields.One2many(
        'electrical.socket.line', 'job_request_id', string='Socket Lines'
    )
    attachments = fields.One2many(
        'ir.attachment', 'res_id', string='Attachments',
        domain=[('res_model', '=', 'electrical.job.request')]
    )
    crm_lead_id = fields.Many2one('crm.lead', string='CRM Lead', index=True)

    # New Header Fields
    property_type = fields.Selection([
        ('house', 'House'),
        ('flat', 'Flat/Apartment'),
        ('other', 'Other'),
    ], string='Property Type', required=True)
    property_age = fields.Selection([
        ('pre1950', 'Before 1950'),
        ('1950-1980', '1950-1980'),
        ('post1980', 'After 1980'),
        ('unknown', 'Not Sure'),
    ], string='Property Age', required=True)
    foundation_type = fields.Selection([
        ('slab', 'Slab (no crawlspace)'),
        ('crawl', 'Crawlspace'),
        ('other', 'Other/Not Sure'),
    ], string='Foundation Type')
    attic_access = fields.Selection([
        ('yes', 'Yes'),
        ('no', 'No'),
        ('unknown', 'Not Sure'),
    ], string='Attic Access')
    panel_type = fields.Selection([
        ('breakers', 'Modern (Circuit Breakers)'),
        ('fuses', 'Older (Fuses)'),
        ('unknown', 'Not Sure'),
    ], string='Panel Type')
    recent_upgrades = fields.Char(string='Recent Upgrades')
    fuse_board_attachment_id = fields.Many2one('ir.attachment', string='Fuse Board Photo')

    # Bonding Fields
    water_bond = fields.Selection([
        ('yes', 'Yes'),
        ('no', 'No'),
        ('unknown', 'Not Sure'),
    ], string='Water Bond Present', default='no')
    water_bond_location = fields.Char(string='Water Bond Location')
    water_bond_attachment_id = fields.Many2one('ir.attachment', string='Water Bond Photo')

    gas_bond = fields.Selection([
        ('yes', 'Yes'),
        ('no', 'No'),
        ('unknown', 'Not Sure'),
    ], string='Gas Bond Present', default='no')
    gas_bond_location = fields.Char(string='Gas Bond Location')
    gas_bond_attachment_id = fields.Many2one('ir.attachment', string='Gas Bond Photo')

    oil_bond = fields.Selection([
        ('yes', 'Yes'),
        ('no', 'No'),
        ('unknown', 'Not Sure'),
    ], string='Oil Bond Present', default='no')
    oil_bond_location = fields.Char(string='Oil Bond Location')
    oil_bond_attachment_id = fields.Many2one('ir.attachment', string='Oil Bond Photo')

    other_services = fields.Selection([
        ('yes', 'Yes'),
        ('no', 'No'),
        ('unknown', 'Not Sure'),
    ], string='Other Buried Services', default='no')
    other_services_desc = fields.Text(string='Other Services Description')
    other_services_attachment_id = fields.Many2one('ir.attachment', string='Other Services Photo')

    @api.constrains('socket_lines')
    def _check_socket_lines(self):
        for record in self:
            if record.job_type == 'new_socket' and not record.socket_lines:
                raise ValidationError(_("At least one socket line is required for 'New Socket' jobs."))





class ElectricalSocketLine(models.Model):
    _name = 'electrical.socket.line'
    _description = 'Electrical Socket Line'

    job_request_id = fields.Many2one('electrical.job.request', string='Job Request', required=True, index=True, ondelete='cascade')    
    room_name = fields.Char(string="Room Name", required=True)
    socket_style = fields.Selection([
        ('standard', 'Standard'),
        ('usb', 'USB Integrated'),
        ('smart', 'Smart Socket')
    ], string="Socket Style", required=True, default='standard')
    height_from_floor = fields.Float(string="Height from Floor (m)", required=True)
    mount_type = fields.Selection([
        ('surface', 'Surface (on wall)'),
        ('flush', 'Flush (in wall)')
    ], string="Surface or Flush Mounted?", required=True)
    flooring_type = fields.Selection([
        ('carpet', 'Carpet'),
        ('laminate', 'Laminate'),
        ('tile', 'Tile'),
        ('wood', 'Wood'),
        ('other', 'Other')
    ], string="Flooring Type", required=True)
    flooring_other = fields.Char(string="Other Flooring Description")
    wall_type = fields.Selection([
        ('plasterboard', 'Plasterboard/Drywall'),
        ('brick', 'Brick/Concrete'),
        ('tiled', 'Tiled Wall'),
        ('glass_splashback', 'Glass Splashback'),
        ('metal_splashback', 'Metal Splashback'),
        ('cladding', 'Cladding'),
        ('other', 'Other/Not Sure')
    ], string="Wall Type")
    gangs = fields.Selection([
        ('single', 'Single'),
        ('double', 'Double'),
        ('triple', 'Triple')
    ], string="Number of Gangs")
    location_attachments = fields.One2many('ir.attachment', 'res_id', string='Location Attachments', domain=[('res_model', '=', 'electrical.socket.line'), ('res_field', '=', 'location_attachments')])
    route_attachments = fields.One2many('ir.attachment', 'res_id', string='Route Attachments', domain=[('res_model', '=', 'electrical.socket.line'), ('res_field', '=', 'route_attachments')])
    socket_comments = fields.Text(string="Additional Comments") 




class Attachment(models.Model):
    _inherit = 'ir.attachment'

    s3_key = fields.Char(string='S3 Key', help='Key of the file in S3 storage')
=== ./models/__init__.py ===
from . import job_request_model
=== ./controllers/job_request_controller.py ===
from odoo import http
from odoo.http import request
import logging
import boto3
from botocore.exceptions import ClientError
from botocore.client import Config
import uuid

_logger = logging.getLogger(__name__)

class JobRequestController(http.Controller):

    def _get_s3_client(self):
        """Initialize S3 client for Hetzner Object Storage."""
        access_key = request.env['ir.config_parameter'].sudo().get_param('hetzner_access_key_id')
        secret_key = request.env['ir.config_parameter'].sudo().get_param('hetzner_secret_access_key')
        region = request.env['ir.config_parameter'].sudo().get_param('hetzner_region', 'fsn1')
        if not access_key or not secret_key:
            raise ValueError('Hetzner S3 credentials not configured.')
        return boto3.client(
            's3',
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
            endpoint_url=f'https://{region}.your-objectstorage.com',
            config=Config(signature_version='s3v4')
        )

    @http.route('/job-request/presigned-url', type='json', auth='public', website=True, methods=['POST'], csrf=False)
    def get_presigned_url(self, file_name, file_type):
        """Generate presigned URL for direct S3 upload."""
        try:
            s3 = self._get_s3_client()
            bucket = request.env['ir.config_parameter'].sudo().get_param('hetzner_bucket', 'electrical-job-portal-fsn1')
            unique_id = str(uuid.uuid4())
            file_ext = '.' + file_name.split('.')[-1] if '.' in file_name else ''
            s3_key = f"job-requests/{unique_id}{file_ext}"

            presigned_url = s3.generate_presigned_url(
                'put_object',
                Params={
                    'Bucket': bucket,
                    'Key': s3_key,
                    'ContentType': file_type
                },
                ExpiresIn=3600  # 1 hour expiry
            )
            return {
                'status': 'success',
                'data': {
                    'url': presigned_url,
                    's3_key': s3_key,
                    'bucket': bucket
                }
            }
        except ClientError as e:
            _logger.error("Presigned URL error: %s", str(e))
            return {'status': 'error', 'message': str(e)}

    @http.route('/job-request', type='http', auth='public', website=True)
    def job_request_form(self, **kwargs):
        """Render the form template (GET)."""
        _logger.debug("Rendering job request form")
        return request.render('electrical_job_request.job_request_form')

    @http.route('/job-request/submit', type='json', auth='public', website=True, methods=['POST'], csrf=False)
    def job_request_submit(self, **data):
        """Handle form submission (JSON POST). Attachments are metadata only."""
        try:
            name = data.get('name', '').strip()
            email = data.get('email', '').strip()
            phone = data.get('phone', '').strip()
            job_type = data.get('job_type', '')
            customer_notes = data.get('customer_notes', '')

            if not name or not email or not job_type:
                return {'status': 'error', 'message': 'Missing required fields: name, email, job type.'}

            # Create CRM Lead
            lead_vals = {
                'name': f"Electrical Job Request - {name}",
                'partner_name': name,
                'email_from': email,
                'phone': phone,
                'description': customer_notes,
                'type': 'lead',
            }
            lead = request.env['crm.lead'].sudo().create(lead_vals)  # sudo() ok for public creation, but monitor

            # Prepare Job Request vals including socket_lines create commands
            job_request_vals = {
                'name': name,
                'email': email,
                'phone': phone,
                'job_type': job_type,
                'customer_notes': customer_notes,
                'crm_lead_id': lead.id,
                'property_type': data.get('property_type'),
                'property_age': data.get('property_age'),
                'foundation_type': data.get('foundation_type'),
                'attic_access': data.get('attic_access'),
                'panel_type': data.get('panel_type'),
                'recent_upgrades': data.get('recent_upgrades'),
                'water_bond': data.get('water_bond'),
                'water_bond_location': data.get('water_bond_location') if data.get('water_bond') == 'yes' else False,
                'gas_bond': data.get('gas_bond'),
                'gas_bond_location': data.get('gas_bond_location') if data.get('gas_bond') == 'yes' else False,
                'oil_bond': data.get('oil_bond'),
                'oil_bond_location': data.get('oil_bond_location') if data.get('oil_bond') == 'yes' else False,
                'other_services': data.get('other_services'),
                'other_services_desc': data.get('other_services_desc') if data.get('other_services') == 'yes' else False,
            }

            socket_lines_cmds = []
            if job_type == 'new_socket' and data.get('socket_lines'):
                valid_styles = ['standard', 'usb', 'smart']
                for line in data.get('socket_lines', []):
                    if line.get('room_name'):
                        socket_lines_cmds.append((0, 0, {
                            'room_name': line['room_name'].strip(),
                            'socket_style': line['socket_style'] if line['socket_style'] in valid_styles else 'standard',
                            'height_from_floor': float(line.get('height_from_floor', 0.0)),
                            'mount_type': line.get('mount_type'),
                            'flooring_type': line.get('flooring_type'),
                            'flooring_other': line.get('flooring_other') if line.get('flooring_type') == 'other' else False,
                            'wall_type': line.get('wall_type'),
                            'gangs': line.get('gangs'),
                            'socket_comments': line.get('socket_comments', ''),
                        }))

            job_request_vals['socket_lines'] = socket_lines_cmds

            # Create the single Job Request record
            job_request = request.env['electrical.job.request'].sudo().create(job_request_vals)

            # Handle Header Attachment Metadata
            fuse_board = data.get('fuse_board_attachment')
            if fuse_board:
                att_id = self._create_attachment(fuse_board, 'electrical.job.request', job_request.id)
                job_request.sudo().write({'fuse_board_attachment_id': att_id})

            water_bond_att = data.get('water_bond_attachment')
            if water_bond_att and data.get('water_bond') == 'yes':
                att_id = self._create_attachment(water_bond_att, 'electrical.job.request', job_request.id)
                job_request.sudo().write({'water_bond_attachment_id': att_id})

            gas_bond_att = data.get('gas_bond_attachment')
            if gas_bond_att and data.get('gas_bond') == 'yes':
                att_id = self._create_attachment(gas_bond_att, 'electrical.job.request', job_request.id)
                job_request.sudo().write({'gas_bond_attachment_id': att_id})

            oil_bond_att = data.get('oil_bond_attachment')
            if oil_bond_att and data.get('oil_bond') == 'yes':
                att_id = self._create_attachment(oil_bond_att, 'electrical.job.request', job_request.id)
                job_request.sudo().write({'oil_bond_attachment_id': att_id})

            other_services_att = data.get('other_services_attachment')
            if other_services_att and data.get('other_services') == 'yes':
                att_id = self._create_attachment(other_services_att, 'electrical.job.request', job_request.id)
                job_request.sudo().write({'other_services_attachment_id': att_id})

            # Handle per-socket attachments (now that socket_lines have IDs)
            for idx, socket_line in enumerate(job_request.socket_lines):
                line_data = data.get('socket_lines', [])[idx]
                for att in line_data.get('location_attachments', []):
                    self._create_attachment(att, 'electrical.socket.line', socket_line.id, 'location_attachments')
                for att in line_data.get('route_attachments', []):
                    self._create_attachment(att, 'electrical.socket.line', socket_line.id, 'route_attachments')

            # Handle general attachments
            for att in data.get('attachments', []):
                self._create_attachment(att, 'electrical.job.request', job_request.id)

            return {'status': 'success', 'message': 'Job request submitted successfully.'}
        except Exception as e:
            _logger.error("Submission error: %s", str(e))
            return {'status': 'error', 'message': f'Server error: {str(e)}'}

    def _create_attachment(self, metadata, res_model, res_id, res_field=False):
        if not metadata:
            return False
        att_vals = {
            'name': metadata.get('name', ''),
            'res_model': res_model,
            'res_id': res_id,
            'type': 'url',
            'url': '',
            's3_key': metadata.get('s3_key', ''),
            'mimetype': metadata.get('type', 'application/octet-stream'),
            'public': False,
        }
        if res_field:
            att_vals['res_field'] = res_field
        attachment = request.env['ir.attachment'].sudo().create(att_vals)
        attachment.sudo().write({'url': f'/attachments/download/{attachment.id}'})
        return attachment.id

    @http.route('/job-request/thank-you', type='http', auth='public', website=True)
    def job_request_thank_you(self, **kwargs):
        """Render thank-you page."""
        return request.render('electrical_job_request.job_request_thank_you')
=== ./controllers/__init__.py ===
# ------------------------------------------------------------
# file: electrical_job_request/controllers/__init__.py
# ------------------------------------------------------------
from . import job_request_controller
=== ./__init__.py ===
# ------------------------------------------------------------
# file: electrical_job_request/__init__.py
# ------------------------------------------------------------
from . import models
from . import controllers
